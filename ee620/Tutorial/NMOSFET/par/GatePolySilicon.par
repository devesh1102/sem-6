
Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 11.7	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 11.7	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 3.45	# [1]
	alpha	= 2.0000e-04	# [1/K]

  * Gain dependence of refractive index in active region:
  * a) Linear model: delta n = a0 * ( (n+p)/(2 * N0) - 1)
  * b) Logarithmic model: delta n = a0 * log ( (n+p)/(2 * N0) )
  * where n/p are the carrier densities in the active region. 
	a0	= 0.0000e+00	# [1]
	N0	= 1.0000e+18	# [1/cm^3]
}


ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
  
  * Carrier dependence (imag) 
  *    delta_k_carr = 1 / (4*PI) * (wavelength^Gamma_k_carr_e*Ck_carr_e*n + wavelength^Gamma_k_carr_h*Ck_carr_h*p) 
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/(2 * Npar) - 1) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 * Npar ) )
	n_0	= 3.45	# [1]
	k_0	= 0.0000e+00	# [1]
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
	Cn_temp	= 2.0000e-04	# [K^-1]
	Cn_carr	= 1	# [1]
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
	Gamma_k_carr	= 1 ,	1	# [1]
	Cn_gain	= 0.0000e+00	# [1]
	Npar	= 1.0000e+18	# [cm^-3]
       Formula = 3
        NumericalTable ( 
          0.1908	0.84	2.73;
          0.1984	0.968	2.89;
          0.2066	1.01	2.909;
          0.2073	1.036	2.928;
          0.208	1.046	2.944;
          0.2087	1.066	2.937;
          0.2094	1.07	2.963;
          0.2101	1.083	2.982;
          0.2109	1.088	2.987;
          0.2116	1.102	3.005;
          0.2123	1.109	3.015;
          0.213	1.119	3.025;
          0.2138	1.133	3.045;
          0.2145	1.139	3.061;
          0.2153	1.155	3.073;
          0.216	1.164	3.086;
          0.2168	1.175	3.102;
          0.2175	1.18	3.112;
          0.2183	1.195	3.135;
          0.2191	1.211	3.15;
          0.2198	1.222	3.169;
          0.2206	1.235	3.19;
          0.2214	1.247	3.206;
          0.2222	1.265	3.228;
          0.223	1.28	3.245;
          0.2238	1.299	3.267;
          0.2246	1.319	3.285;
          0.2254	1.34	3.302;
          0.2263	1.362	3.319;
          0.2271	1.389	3.334;
          0.2279	1.416	3.35;
          0.2228	1.445	3.359;
          0.2296	1.471	3.366;
          0.2305	1.502	3.368;
          0.2313	1.526	3.368;
          0.2322	1.548	3.364;
          0.2311	1.566	3.358;
          0.2339	1.579	3.353;
          0.2348	1.585	3.346;
          0.2357	1.59	3.344;
          0.2366	1.591	3.344;
          0.2375	1.592	3.347;
          0.2384	1.589	3.354;
          0.2394	1.586	3.363;
          0.2403	1.582	3.376;
          0.2412	1.579	3.389;
          0.2422	1.573	3.408;
          0.2431	1.571	3.429;
          0.2441	1.57	3.451;
          0.245	1.569	3.477;
          0.246	1.568	3.504;
          0.247	1.569	3.533;
          0.248	1.57	3.565;
          0.249	1.575	3.598;
          0.25	1.58	3.632;
          0.251	1.584	3.67;
          0.252	1.591	3.709;
          0.253	1.597	3.749;
          0.2541	1.608	3.789;
          0.2551	1.618	3.835;
          0.2562	1.629	3.88;
          0.2572	1.643	3.928;
          0.2583	1.658	3.979;
          0.2594	1.673	4.031;
          0.2605	1.692	4.088;
          0.2616	1.713	4.149;
          0.2627	1.737	4.211;
          0.2638	1.764	4.278;
          0.2649	1.794	4.35;
          0.2661	1.831	4.426;
          0.2672	1.874	4.506;
          0.2684	1.927	4.59;
          0.2695	1.988	4.678;
          0.2707	2.059	4.764;
          0.2719	2.14	4.849;
          0.2731	2.234	4.933;
          0.2743	2.339	5.011;
          0.2755	2.451	5.082;
          0.2768	2.572	5.148;
          0.278	2.7	5.206;
          0.2792	2.833	5.257;
          0.2805	2.974	5.304;
          0.2818	3.12	5.344;
          0.2831	3.277	5.381;
          0.2844	3.444	5.414;
          0.2857	3.634	5.435;
          0.287	3.849	5.439;
          0.2883	4.086	5.395;
          0.2897	4.318	5.301;
          0.291	4.525	5.158;
          0.2924	4.686	4.989;
          0.2938	4.805	4.812;
          0.2952	4.888	4.639;
          0.2966	4.941	4.48;
          0.298	4.977	4.335;
          0.2995	4.999	4.204;
          0.3009	5.012	4.086;
          0.3024	5.02	3.979;
          0.3039	5.021	3.885;
          0.3054	5.02	3.798;
          0.3069	5.018	3.72;
          0.3084	5.015	3.65;
          0.31	5.01	3.587;
          0.3115	5.009	3.529;
          0.3131	5.01	3.477;
          0.3147	5.009	3.429;
          0.3163	5.012	3.386;
          0.3179	5.016	3.346;
          0.3195	5.021	3.31;
          0.3212	5.029	3.275;
          0.3229	5.04	3.242;
          0.3246	5.052	3.211;
          0.3263	5.065	3.182;
          0.328	5.079	3.154;
          0.3297	5.095	3.128;
          0.3315	5.115	3.103;
          0.3333	5.134	3.079;
          0.3351	5.156	3.058;
          0.3369	5.179	3.039;
          0.3388	5.204	3.021;
          0.3406	5.231	3.007;
          0.3425	5.261	2.995;
          0.3444	5.296	2.987;
          0.3463	5.336	2.983;
          0.3483	5.383	2.984;
          0.3502	5.442	2.989;
          0.3522	5.515	2.999;
          0.3542	5.61	3.014;
          0.3563	5.733	3.026;
          0.3583	5.894	3.023;
          0.3604	6.089	2.982;
          0.3625	6.308	2.881;
          0.3647	6.522	2.705;
          0.3668	6.695	2.456;
          0.369	6.796	2.169;
          0.3712	6.829	1.87;
          0.3734	6.799	1.577;
          0.3757	6.709	1.321;
          0.378	6.585	1.11;
          0.3803	6.452	0.945;
          0.3827	6.316	0.815;
          0.385	6.185	0.714;
          0.3875	6.062	0.63;
          0.3899	5.948	0.561;
          0.3924	5.842	0.505;
          0.3949	5.744	0.456;
          0.3974	5.654	0.416;
          0.4	5.57	0.387;
          0.4025	5.493	0.355;
          0.4052	5.42	0.329;
          0.4078	5.349	0.313;
          0.4105	5.284	0.291;
          0.4133	5.222	0.269;
          0.4161	5.164	0.255;
          0.4189	5.109	0.244;
          0.4217	5.058	0.228;
          0.4246	5.009	0.211;
          0.4275	4.961	0.203;
          0.4305	4.916	0.194;
          0.4335	4.872	0.185;
          0.4366	4.831	0.185;
          0.4397	4.791	0.17;
          0.4428	4.753	0.163;
          0.446	4.718	0.149;
          0.4492	4.682	0.149;
          0.4525	4.648	0.133;
          0.4558	4.615	0.131;
          0.4592	4.583	0.13;
          0.4626	4.553	0.131;
          0.4661	4.522	0.134;
          0.4696	4.495	0.12;
          0.4732	4.466	0.12;
          0.4769	4.442	0.09;
          0.4806	4.416	0.094;
          0.4843	4.391	0.083;
          0.4881	4.367	0.079;
          0.492	4.343	0.077;
          0.4959	4.32	0.073;
          0.4999	4.298	0.073;
          0.504	4.277	0.066;
          0.5081	4.255	0.072;
          0.5123	4.235	0.06;
          0.5166	4.215	0.06;
          0.5209	4.196	0.056;
          0.5254	4.177	0.053;
          0.5299	4.159	0.043;
          0.5344	4.14	0.045;
          0.5391	4.123	0.048;
          0.5438	4.106	0.044;
          0.5486	4.089	0.044;
          0.5535	4.073	0.032;
          0.5585	4.057	0.038;
          0.5636	4.042	0.032;
          0.5687	4.026	0.034;
          0.574	4.012	0.03;
          0.5794	3.997	0.027;
          0.5848	3.983	0.03;
          0.5904	3.969	0.03;
          0.5961	3.956	0.027;
          0.6019	3.943	0.025;
          0.6078	3.931	0.025;
          0.6138	3.918	0.024;
          0.6199	3.906	0.022;
          0.6262	3.893	0.022;
          0.6326	3.882	0.019;
          0.6391	3.87	0.018;
          0.6458	3.858	0.017;
          0.6526	3.847	0.016;
          0.6595	3.837	0.016;
          0.6666	3.826	0.015;
          0.6738	3.815	0.014;
          0.6812	3.805	0.013;
          0.6888	3.796	0.013;
          0.6965	3.787	0.013;
          0.7045	3.778	0.012;
          0.7126	3.768	0.011;
          0.7208	3.761	0.011;
          0.7293	3.752	0.01;
          0.738	3.745	0.01;
          0.7469	3.736	9.0000e-03;
          0.756	3.728	9.0000e-03;
          0.7653	3.721	8.0000e-03;
          0.7749	3.714	8.0000e-03;
          0.7847	3.705	7.0000e-03;
          0.7948	3.697	7.0000e-03;
          0.8051	3.688	6.0000e-03;
          0.8157	3.681	6.0000e-03;
          0.8266	3.673	5.0000e-03;
          0.83	3.662	4.2734e-03;
          0.84	3.656	3.9505e-03;
          0.85	3.65	3.6188e-03;
          0.86	3.644	3.2850e-03;
          0.87	3.638	2.9908e-03;
          0.88	3.632	2.6821e-03;
          0.89	3.626	2.4293e-03;
          0.9	3.62	2.1916e-03;
          0.91	3.614	1.9697e-03;
          0.92	3.608	1.7571e-03;
          0.93	3.602	1.5541e-03;
          0.94	3.597	1.3689e-03;
          0.95	3.592	1.1869e-03;
          0.96	3.587	1.0237e-03;
          0.97	3.582	8.7997e-04;
          0.98	3.578	7.4788e-04;
          0.99	3.574	6.2395e-04;
          1	3.57	5.0930e-04;
          1.01	3.566	4.1071e-04;
          1.02	3.563	3.2386e-04;
          1.03	3.56	2.4753e-04;
          1.04	3.557	1.8704e-04;
          1.05	3.554	1.3620e-04;
          1.06	3.551	9.3631e-05;
          1.07	3.548	6.8118e-05;
          1.08	3.546	5.3285e-05;
          1.09	3.544	4.0768e-05;
          1.1	3.541	3.0637e-05;
          1.11	3.539	2.3849e-05;
          1.12	3.537	1.7825e-05;
          1.13	3.534	1.3488e-05;
          1.14	3.532	9.0718e-06;
          1.15	3.53	6.2230e-06;
          1.16	3.528	3.8770e-06;
          1.17	3.526	2.0483e-06;
          1.18	3.524	6.1036e-07;
          1.19	3.522	3.4091e-07;
          1.2	3.52	2.1008e-07;
          1.21	3.528	1.2518e-07;
          1.22	3.516	7.9609e-08;
          1.23	3.515	4.6004e-08;
          1.24	3.513	2.3682e-08;
          1.25	3.511	9.9472e-09;
          1.26	3.51	3.6096e-09;
          1.27	3.508	2.0213e-09;
          1.28	3.507	1.2223e-09;
          1.29	3.506	7.2885e-10;
          1.3	3.504	4.6553e-10;
          1.31	3.503	2.8147e-10;
          1.32	3.501	1.6807e-10;
          1.33	3.5	8.4670e-11;
          1.34	3.498	3.7322e-11;
          1.35	3.497	1.8263e-11;
          1.36	3.496	1.0823e-11;
          1.37	3.495	7.3044e-12;
          1.38	3.493	4.9418e-12;
          1.39	3.492	2.7653e-12;
          1.4	3.491	2.2282e-12;
          1.41	3.49	1.6831e-12;
          1.42	3.489	9.6050e-13;
          1.43	3.488	8.7623e-13;
          1.44	3.487	4.8128e-13;
          1.45	3.486	3.6924e-13;
          10	3.42	1.0000e-13;
          10.001	3.42	1.0000e-13;
          10.002	3.42	1.0000e-13;
        ) 
	Tpar	= 3.0000e+02	# [K]
} 


* SpectralConversion
* { * Spectral Conversion Model
*   No default model, user has to define.
*   All wavelength parameters should be in nanometers.
*   Choice of Analytic or NumericalTable selected in Physics section of region
*  
*   ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
*   AbsorptionScaling = float        * scale absorption
*   EmissionScaling = float          * scale emission
*   Analytic (
*     AbsorptionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*     EmissionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*   )
*   NumericalTable (
*     AbsorptionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )
*     EmissionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )

*   ConversionEfficiency = 1.0
* }


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 1.63	# [J/(K cm^3)]
	cv_b	= 0.0000e+00	# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00	# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00	# [J/(K^4 cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 1.5	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 1.5	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}

Bandgap
{ * For conductors Band Gap is zero and the following parameters are used:
	WorkFunction	= 4.25	# [eV]
	FermiEnergy	= 11.7	# [eV]
  * for backward compatibility Chi0 could be used to define the work function.
}


OldSlotboom
{ * deltaEg = dEg0 + Ebgn ( ln(N/Nref) + [ (ln(N/Nref))^2 + 0.5]^1/2 )
  * dEg0 is defined in BandGap section 
	Ebgn	= 9.0000e-03	# [eV]
	Nref	= 1.0000e+17	# [cm^(-3)]
}


Slotboom
{ * deltaEg = dEg0 + Ebgn ( ln(N/Nref) + [ (ln(N/Nref))^2 + 0.5]^1/2 )
  * dEg0 is defined in BandGap section 
	Ebgn	= 6.9200e-03	# [eV]
	Nref	= 1.3000e+17	# [cm^(-3)]
}

delAlamo
{ * deltaEg = dEg0 + Ebgn  ln(N/Nref) 
  * dEg0 is defined in BandGap section 
	Ebgn	= 0.0187	# [eV]
	Nref	= 7.0000e+17	# [cm^(-3)]
}

Bennett
{ * deltaEg = dEg0 + Ebgn (ln(N/Nref))^2
  * dEg0 is defined in BandGap section 
	Ebgn	= 6.8400e-03	# [eV]
	Nref	= 3.1620e+18	# [cm^(-3)]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
	fcaalpha_n	= 4.0000e-18	# [cm^2]
	fcaalpha_p	= 8.0000e-18	# [cm^2]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
	eps	= 0.0000e+00	# [1]
	a0	= 3.1890e-10	# [cm]
	alpha	= 0.0000e+00	# [cm/K]
	Tpar	= 3.0000e+02	# [K]
	a_nu	= 0.19	# [eV]
	a_c	= -4.0800e+00	# [eV]
	b_shear	= 0.9163	# [eV]
	c_11	= 11.879	# [1e-2 GPa]
	c_12	= 5.376	# [1e-2 GPa]
	d1	= -8.9000e-01	# [eV]
	d2	= 4.27	# [eV]
	d3	= 5.18	# [eV]
	d4	= -2.5900e+00	# [eV]
	c_13	= 1	# [1e-2 GPa]
	c_33	= 3.92	# [1e-2 GPa]
	c0	= 5.1850e-10	# [cm]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
	a	= 0.1905	# [1]
	ml	= 0.9163	# [1]
	mm	= 0.0000e+00	# [1]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
	a	= 0.443587	# [1]
	b	= 0.003609528	# [K^-1]
	c	= 0.0001173515	# [K^-2]
	d	= 1.263218e-06	# [K^-3]
	e	= 3.025581e-09	# [K^-4]
	f	= 0.004683382	# [K^-1]
	g	= 0.0002286895	# [K^-2]
	h	= 7.469271e-07	# [K^-3]
	i	= 1.727481e-09	# [K^-4]
	mm	= 0	# [1]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *    where k=(x,y,z) is unit normal vector in reziprocal
  *    space.  '+' for light hole band, '-' for heavy hole band
  * 2: Heavy hole mass mh and light hole mass ml are
  *    specified explicitly.
  *    Use me as electron mass for free-carrier effect in 
  *    the refractive index model.
  * For electron masses, the following formula options exist:
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    use the a, ml, and mm parameters from eDOSMass.
  *    Typically, this leads to anisotropy.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 1 ,	1	# [1]
  * Formula(hole) 1 parameters:
	A	= 4.22	# [1]
	B	= 0.6084	# [1]
	C	= 23.058	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Alternative to the specification of formula, offset,
  * and masses, you can make an arbitrary number of ladder
  * specification, 'eLadder(mz, mxy, deg, dE) and hLadder(...)
  * Here, mz is the quantization mass, mxy an in-plane DOS mass,
  * deg the ladder degeneracy, and dE an shift of the band edge
  * for the ladder (non-negative; the shift is always outward,
  * away from midgap).  When present, we solve the Schroedinger
  * equation separately for each ladder

  * Temperatures in rescaling of the mxy for eLadder and hLadder
	ShiftTemperature	= 1.0000e+10 ,	1.0000e+10	# [K]
}

QuantumPotentialParameters
{ * gamma:  weighting factor for quantum potential
  * theta:  weight for quadratic term
  * xi:     weight for quasi Fermi potential
  * eta:    weight for electrostatic potential
  * nu :    weight for DOS mass change from stress
	gamma	= 3.6 ,	5.6	# [1]
	theta	= 0.5 ,	0.5	# [1]
	xi	= 1 ,	1	# [1]
	eta	= 1 ,	1	# [1]
	nu	= 0.0000e+00 ,	0.0000e+00	# [1]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 1.4170e+03 ,	4.7050e+02	# [cm^2/(Vs)]
	Exponent	= 2.5 ,	2.2	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 1.4170e+03 ,	4.7050e+02	# [cm^2/(Vs)]
	Exponent	= 2.5 ,	2.2	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 1 ,	1	# [1]
  * If formula=1, model suggested by Masetti et al. is used:
  * mu_dop = mumin1 exp(-Pc/N) + (mu_const - mumin2)/(1+(N/Cr)^alpha)
  *                             - mu1/(1+(Cs/N)^beta)
  * with mu_const from ConstantMobility
	mumin1	= 52.2 ,	44.9	# [cm^2/Vs]
	mumin2	= 52.2 ,	0.0000e+00	# [cm^2/Vs]
	mu1	= 43.4 ,	29	# [cm^2/Vs]
	Pc	= 0.0000e+00 ,	9.2300e+16	# [cm^3]
	Cr	= 9.6800e+16 ,	2.2300e+17	# [cm^3]
	Cs	= 3.4300e+20 ,	6.1000e+20	# [cm^3]
	alpha	= 0.68 ,	0.719	# [1]
	beta	= 2 ,	2	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 1 ,	1	# [1]
  * If formula=1, model suggested by Masetti et al. is used:
  * mu_dop = mumin1 exp(-Pc/N) + (mu_const - mumin2)/(1+(N/Cr)^alpha)
  *                             - mu1/(1+(Cs/N)^beta)
  * with mu_const from ConstantMobility
	mumin1	= 52.2 ,	44.9	# [cm^2/Vs]
	mumin2	= 52.2 ,	0.0000e+00	# [cm^2/Vs]
	mu1	= 43.4 ,	29	# [cm^2/Vs]
	Pc	= 0.0000e+00 ,	9.2300e+16	# [cm^3]
	Cr	= 9.6800e+16 ,	2.2300e+17	# [cm^3]
	Cs	= 3.4300e+20 ,	6.1000e+20	# [cm^3]
	alpha	= 0.68 ,	0.719	# [1]
	beta	= 2 ,	2	# [1]
}

ThinLayerMobility:
{ * Mobility model for thin layers with geometric
  * quantization.  See the manual for details.
	beta	= 4 ,	4	# [1]
	zeta	= 2.88 ,	1.05	# [1]
	p1	= 0.55 ,	0.0000e+00	# [1]
	p2	= 4.0000e+02 ,	0.66	# [1]
	p3	= 1.44 ,	1	# [1]
	mz1	= 0.916 ,	0.29	# [m0]
	mz2	= 0.19 ,	0.25	# [m0]
	wt01	= 3.0000e-06 ,	0.0000e+00	# [um]
	wt02	= 3.5000e-07 ,	0.0000e+00	# [um]
	muac01	= 3.1500e+02 ,	30.2	# [cm^2/Vs]
	muac02	= 6.4 ,	69	# [cm^2/Vs]
	mutf0	= 0.15 ,	0.28	# [cm^2/Vs]
	musp0	= 1.1450e-08 ,	1.6000e-10	# [cm^2/Vs]
	tsp0	= 1.0000e-04 ,	1.0000e-04	# [um]
	ftf0	= 6.2500e+03 ,	1.0000e+100	# [V/cm]
	tmin	= 2.0000e-03 ,	2.0000e-03	# [um]
}

ThinLayerMobility_aniso:
{ * Mobility model for thin layers with geometric
  * quantization.  See the manual for details.
	beta	= 4 ,	4	# [1]
	zeta	= 2.88 ,	1.05	# [1]
	p1	= 0.55 ,	0.0000e+00	# [1]
	p2	= 4.0000e+02 ,	0.66	# [1]
	p3	= 1.44 ,	1	# [1]
	mz1	= 0.916 ,	0.29	# [m0]
	mz2	= 0.19 ,	0.25	# [m0]
	wt01	= 3.0000e-06 ,	0.0000e+00	# [um]
	wt02	= 3.5000e-07 ,	0.0000e+00	# [um]
	muac01	= 3.1500e+02 ,	30.2	# [cm^2/Vs]
	muac02	= 6.4 ,	69	# [cm^2/Vs]
	mutf0	= 0.15 ,	0.28	# [cm^2/Vs]
	musp0	= 1.1450e-08 ,	1.6000e-10	# [cm^2/Vs]
	tsp0	= 1.0000e-04 ,	1.0000e-04	# [um]
	ftf0	= 6.2500e+03 ,	1.0000e+100	# [V/cm]
	tmin	= 2.0000e-03 ,	2.0000e-03	# [um]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 1.109 ,	1.213	# [1]
	betaexp	= 0.66 ,	0.17	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 1 ,	1	# [1]
 * Formula1 for saturation velocity:
 *            vsat = vsat0 (T/T0)^(-Vsatexp)
 * (Parameter Vsat_Formula has to be not equal to 2)
	vsat0	= 1.0700e+07 ,	8.3700e+06	# [1]
	vsatexp	= 0.87 ,	0.52	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 1.109 ,	1.213	# [1]
	betaexp	= 0.66 ,	0.17	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 1 ,	1	# [1]
 * Formula1 for saturation velocity:
 *            vsat = vsat0 (T/T0)^(-Vsatexp)
 * (Parameter Vsat_Formula has to be not equal to 2)
	vsat0	= 1.0700e+07 ,	8.3700e+06	# [1]
	vsatexp	= 0.87 ,	0.52	# [1]
}

UniBoDopingDependence:
{
  * Baccarani model (University of Bologna) is used:
  * Constant mobility model is defined here as well:
  * mu_const = mumax (T/T0)^(-Exponent+Exponent2*(T/T0))
  * mu_dop = mu_0(Na,Nd,T/T0)                                               
  *         + (mu_const - mu_0)/(1 + (Nd/Cr)^alpha + (Na/Cr2)^beta)         
  *         - mu_1(Na,Nd,T/T0)/(1+(Nd/Cs + Na/Cs2)^(-2))                    
  * with mu_const from above
  * mu_0 = (mumin1 (T/T0)^(-mumin1_exp) Nd + mumin2 (T/T0)^(-mumin2_exp)Na)/(Nd+Na)
  * mu_1 = (mu1 (T/T0)^(-mu1_exp) Nd + mu2 (T/T0)^(-mu2_exp) Na)/(Nd+Na)
  * Cr=Cr (T/T0)^Cr_exp
  * Cr2=Cr2 (T/T0)^Cr2_exp
  * Cs=Cs (T/T0)^Cs_exp
	mumax	= 1.4410e+03 ,	4.7050e+02	# [cm^2/(Vs)]
	Exponent	= 2.45 ,	2.16	# [1]
	Exponent2	= -1.1000e-01 ,	0.0000e+00	# [1]
	mumin1	= 55 ,	90	# [cm^2/Vs]
	mumin2	= 1.3200e+02 ,	44	# [cm^2/Vs]
	mumin1_exp	= 0.6 ,	1.3	# [1]
	mumin2_exp	= 1.3 ,	0.7	# [1]
	mu1	= 42.4 ,	28.2	# [cm^2/Vs]
	mu2	= 73.5 ,	28.2	# [cm^2/Vs]
	mu1_exp	= 0.5 ,	2	# [1]
	mu2_exp	= 1.25 ,	0.8	# [1]
	Pc	= 0.0000e+00 ,	0.0000e+00	# [cm^3]
	Cr	= 8.9000e+16 ,	1.3000e+18	# [cm^3]
	Cr2	= 1.2200e+17 ,	2.4500e+17	# [cm^3]
	Cs	= 2.9000e+20 ,	1.1000e+18	# [cm^3]
	Cs2	= 7.0000e+20 ,	6.1000e+20	# [cm^3]
	Cr_exp	= 3.65 ,	2.2	# [1]
	Cr2_exp	= 2.65 ,	3.1	# [1]
	Cs_exp	= 0.0000e+00 ,	6.2	# [1]
	alpha	= 0.68 ,	0.77	# [1]
	beta	= 0.72 ,	0.719	# [1]
}

UniBoDopingDependence_aniso:
{
  * Baccarani model (University of Bologna) is used:
  * Constant mobility model is defined here as well:
  * mu_const = mumax (T/T0)^(-Exponent+Exponent2*(T/T0))
  * mu_dop = mu_0(Na,Nd,T/T0)                                               
  *         + (mu_const - mu_0)/(1 + (Nd/Cr)^alpha + (Na/Cr2)^beta)         
  *         - mu_1(Na,Nd,T/T0)/(1+(Nd/Cs + Na/Cs2)^(-2))                    
  * with mu_const from above
  * mu_0 = (mumin1 (T/T0)^(-mumin1_exp) Nd + mumin2 (T/T0)^(-mumin2_exp)Na)/(Nd+Na)
  * mu_1 = (mu1 (T/T0)^(-mu1_exp) Nd + mu2 (T/T0)^(-mu2_exp) Na)/(Nd+Na)
  * Cr=Cr (T/T0)^Cr_exp
  * Cr2=Cr2 (T/T0)^Cr2_exp
  * Cs=Cs (T/T0)^Cs_exp
	mumax	= 1.4410e+03 ,	4.7050e+02	# [cm^2/(Vs)]
	Exponent	= 2.45 ,	2.16	# [1]
	Exponent2	= -1.1000e-01 ,	0.0000e+00	# [1]
	mumin1	= 55 ,	90	# [cm^2/Vs]
	mumin2	= 1.3200e+02 ,	44	# [cm^2/Vs]
	mumin1_exp	= 0.6 ,	1.3	# [1]
	mumin2_exp	= 1.3 ,	0.7	# [1]
	mu1	= 42.4 ,	28.2	# [cm^2/Vs]
	mu2	= 73.5 ,	28.2	# [cm^2/Vs]
	mu1_exp	= 0.5 ,	2	# [1]
	mu2_exp	= 1.25 ,	0.8	# [1]
	Pc	= 0.0000e+00 ,	0.0000e+00	# [cm^3]
	Cr	= 8.9000e+16 ,	1.3000e+18	# [cm^3]
	Cr2	= 1.2200e+17 ,	2.4500e+17	# [cm^3]
	Cs	= 2.9000e+20 ,	1.1000e+18	# [cm^3]
	Cs2	= 7.0000e+20 ,	6.1000e+20	# [cm^3]
	Cr_exp	= 3.65 ,	2.2	# [1]
	Cr2_exp	= 2.65 ,	3.1	# [1]
	Cs_exp	= 0.0000e+00 ,	6.2	# [1]
	alpha	= 0.68 ,	0.77	# [1]
	beta	= 0.72 ,	0.719	# [1]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 0.0000e+00	# [cm^3/s]
	alpha	= 0.0000e+00	# []
}

TableODB
{ * Each entry of the table consists of three values:
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
   0.1908	0.84	2.73;
   0.1984	0.968	2.89;
   0.2066	1.01	2.909;
   0.2073	1.036	2.928;
   0.208	1.046	2.944;
   0.2087	1.066	2.937;
   0.2094	1.07	2.963;
   0.2101	1.083	2.982;
   0.2109	1.088	2.987;
   0.2116	1.102	3.005;
   0.2123	1.109	3.015;
   0.213	1.119	3.025;
   0.2138	1.133	3.045;
   0.2145	1.139	3.061;
   0.2153	1.155	3.073;
   0.216	1.164	3.086;
   0.2168	1.175	3.102;
   0.2175	1.18	3.112;
   0.2183	1.195	3.135;
   0.2191	1.211	3.15;
   0.2198	1.222	3.169;
   0.2206	1.235	3.19;
   0.2214	1.247	3.206;
   0.2222	1.265	3.228;
   0.223	1.28	3.245;
   0.2238	1.299	3.267;
   0.2246	1.319	3.285;
   0.2254	1.34	3.302;
   0.2263	1.362	3.319;
   0.2271	1.389	3.334;
   0.2279	1.416	3.35;
   0.2228	1.445	3.359;
   0.2296	1.471	3.366;
   0.2305	1.502	3.368;
   0.2313	1.526	3.368;
   0.2322	1.548	3.364;
   0.2311	1.566	3.358;
   0.2339	1.579	3.353;
   0.2348	1.585	3.346;
   0.2357	1.59	3.344;
   0.2366	1.591	3.344;
   0.2375	1.592	3.347;
   0.2384	1.589	3.354;
   0.2394	1.586	3.363;
   0.2403	1.582	3.376;
   0.2412	1.579	3.389;
   0.2422	1.573	3.408;
   0.2431	1.571	3.429;
   0.2441	1.57	3.451;
   0.245	1.569	3.477;
   0.246	1.568	3.504;
   0.247	1.569	3.533;
   0.248	1.57	3.565;
   0.249	1.575	3.598;
   0.25	1.58	3.632;
   0.251	1.584	3.67;
   0.252	1.591	3.709;
   0.253	1.597	3.749;
   0.2541	1.608	3.789;
   0.2551	1.618	3.835;
   0.2562	1.629	3.88;
   0.2572	1.643	3.928;
   0.2583	1.658	3.979;
   0.2594	1.673	4.031;
   0.2605	1.692	4.088;
   0.2616	1.713	4.149;
   0.2627	1.737	4.211;
   0.2638	1.764	4.278;
   0.2649	1.794	4.35;
   0.2661	1.831	4.426;
   0.2672	1.874	4.506;
   0.2684	1.927	4.59;
   0.2695	1.988	4.678;
   0.2707	2.059	4.764;
   0.2719	2.14	4.849;
   0.2731	2.234	4.933;
   0.2743	2.339	5.011;
   0.2755	2.451	5.082;
   0.2768	2.572	5.148;
   0.278	2.7	5.206;
   0.2792	2.833	5.257;
   0.2805	2.974	5.304;
   0.2818	3.12	5.344;
   0.2831	3.277	5.381;
   0.2844	3.444	5.414;
   0.2857	3.634	5.435;
   0.287	3.849	5.439;
   0.2883	4.086	5.395;
   0.2897	4.318	5.301;
   0.291	4.525	5.158;
   0.2924	4.686	4.989;
   0.2938	4.805	4.812;
   0.2952	4.888	4.639;
   0.2966	4.941	4.48;
   0.298	4.977	4.335;
   0.2995	4.999	4.204;
   0.3009	5.012	4.086;
   0.3024	5.02	3.979;
   0.3039	5.021	3.885;
   0.3054	5.02	3.798;
   0.3069	5.018	3.72;
   0.3084	5.015	3.65;
   0.31	5.01	3.587;
   0.3115	5.009	3.529;
   0.3131	5.01	3.477;
   0.3147	5.009	3.429;
   0.3163	5.012	3.386;
   0.3179	5.016	3.346;
   0.3195	5.021	3.31;
   0.3212	5.029	3.275;
   0.3229	5.04	3.242;
   0.3246	5.052	3.211;
   0.3263	5.065	3.182;
   0.328	5.079	3.154;
   0.3297	5.095	3.128;
   0.3315	5.115	3.103;
   0.3333	5.134	3.079;
   0.3351	5.156	3.058;
   0.3369	5.179	3.039;
   0.3388	5.204	3.021;
   0.3406	5.231	3.007;
   0.3425	5.261	2.995;
   0.3444	5.296	2.987;
   0.3463	5.336	2.983;
   0.3483	5.383	2.984;
   0.3502	5.442	2.989;
   0.3522	5.515	2.999;
   0.3542	5.61	3.014;
   0.3563	5.733	3.026;
   0.3583	5.894	3.023;
   0.3604	6.089	2.982;
   0.3625	6.308	2.881;
   0.3647	6.522	2.705;
   0.3668	6.695	2.456;
   0.369	6.796	2.169;
   0.3712	6.829	1.87;
   0.3734	6.799	1.577;
   0.3757	6.709	1.321;
   0.378	6.585	1.11;
   0.3803	6.452	0.945;
   0.3827	6.316	0.815;
   0.385	6.185	0.714;
   0.3875	6.062	0.63;
   0.3899	5.948	0.561;
   0.3924	5.842	0.505;
   0.3949	5.744	0.456;
   0.3974	5.654	0.416;
   0.4	5.57	0.387;
   0.4025	5.493	0.355;
   0.4052	5.42	0.329;
   0.4078	5.349	0.313;
   0.4105	5.284	0.291;
   0.4133	5.222	0.269;
   0.4161	5.164	0.255;
   0.4189	5.109	0.244;
   0.4217	5.058	0.228;
   0.4246	5.009	0.211;
   0.4275	4.961	0.203;
   0.4305	4.916	0.194;
   0.4335	4.872	0.185;
   0.4366	4.831	0.185;
   0.4397	4.791	0.17;
   0.4428	4.753	0.163;
   0.446	4.718	0.149;
   0.4492	4.682	0.149;
   0.4525	4.648	0.133;
   0.4558	4.615	0.131;
   0.4592	4.583	0.13;
   0.4626	4.553	0.131;
   0.4661	4.522	0.134;
   0.4696	4.495	0.12;
   0.4732	4.466	0.12;
   0.4769	4.442	0.09;
   0.4806	4.416	0.094;
   0.4843	4.391	0.083;
   0.4881	4.367	0.079;
   0.492	4.343	0.077;
   0.4959	4.32	0.073;
   0.4999	4.298	0.073;
   0.504	4.277	0.066;
   0.5081	4.255	0.072;
   0.5123	4.235	0.06;
   0.5166	4.215	0.06;
   0.5209	4.196	0.056;
   0.5254	4.177	0.053;
   0.5299	4.159	0.043;
   0.5344	4.14	0.045;
   0.5391	4.123	0.048;
   0.5438	4.106	0.044;
   0.5486	4.089	0.044;
   0.5535	4.073	0.032;
   0.5585	4.057	0.038;
   0.5636	4.042	0.032;
   0.5687	4.026	0.034;
   0.574	4.012	0.03;
   0.5794	3.997	0.027;
   0.5848	3.983	0.03;
   0.5904	3.969	0.03;
   0.5961	3.956	0.027;
   0.6019	3.943	0.025;
   0.6078	3.931	0.025;
   0.6138	3.918	0.024;
   0.6199	3.906	0.022;
   0.6262	3.893	0.022;
   0.6326	3.882	0.019;
   0.6391	3.87	0.018;
   0.6458	3.858	0.017;
   0.6526	3.847	0.016;
   0.6595	3.837	0.016;
   0.6666	3.826	0.015;
   0.6738	3.815	0.014;
   0.6812	3.805	0.013;
   0.6888	3.796	0.013;
   0.6965	3.787	0.013;
   0.7045	3.778	0.012;
   0.7126	3.768	0.011;
   0.7208	3.761	0.011;
   0.7293	3.752	0.01;
   0.738	3.745	0.01;
   0.7469	3.736	9.0000e-03;
   0.756	3.728	9.0000e-03;
   0.7653	3.721	8.0000e-03;
   0.7749	3.714	8.0000e-03;
   0.7847	3.705	7.0000e-03;
   0.7948	3.697	7.0000e-03;
   0.8051	3.688	6.0000e-03;
   0.8157	3.681	6.0000e-03;
   0.8266	3.673	5.0000e-03;
   0.83	3.662	4.2734e-03;
   0.84	3.656	3.9505e-03;
   0.85	3.65	3.6188e-03;
   0.86	3.644	3.2850e-03;
   0.87	3.638	2.9908e-03;
   0.88	3.632	2.6821e-03;
   0.89	3.626	2.4293e-03;
   0.9	3.62	2.1916e-03;
   0.91	3.614	1.9697e-03;
   0.92	3.608	1.7571e-03;
   0.93	3.602	1.5541e-03;
   0.94	3.597	1.3689e-03;
   0.95	3.592	1.1869e-03;
   0.96	3.587	1.0237e-03;
   0.97	3.582	8.7997e-04;
   0.98	3.578	7.4788e-04;
   0.99	3.574	6.2395e-04;
   1	3.57	5.0930e-04;
   1.01	3.566	4.1071e-04;
   1.02	3.563	3.2386e-04;
   1.03	3.56	2.4753e-04;
   1.04	3.557	1.8704e-04;
   1.05	3.554	1.3620e-04;
   1.06	3.551	9.3631e-05;
   1.07	3.548	6.8118e-05;
   1.08	3.546	5.3285e-05;
   1.09	3.544	4.0768e-05;
   1.1	3.541	3.0637e-05;
   1.11	3.539	2.3849e-05;
   1.12	3.537	1.7825e-05;
   1.13	3.534	1.3488e-05;
   1.14	3.532	9.0718e-06;
   1.15	3.53	6.2230e-06;
   1.16	3.528	3.8770e-06;
   1.17	3.526	2.0483e-06;
   1.18	3.524	6.1036e-07;
   1.19	3.522	3.4091e-07;
   1.2	3.52	2.1008e-07;
   1.21	3.528	1.2518e-07;
   1.22	3.516	7.9609e-08;
   1.23	3.515	4.6004e-08;
   1.24	3.513	2.3682e-08;
   1.25	3.511	9.9472e-09;
   1.26	3.51	3.6096e-09;
   1.27	3.508	2.0213e-09;
   1.28	3.507	1.2223e-09;
   1.29	3.506	7.2885e-10;
   1.3	3.504	4.6553e-10;
   1.31	3.503	2.8147e-10;
   1.32	3.501	1.6807e-10;
   1.33	3.5	8.4670e-11;
   1.34	3.498	3.7322e-11;
   1.35	3.497	1.8263e-11;
   1.36	3.496	1.0823e-11;
   1.37	3.495	7.3044e-12;
   1.38	3.493	4.9418e-12;
   1.39	3.492	2.7653e-12;
   1.4	3.491	2.2282e-12;
   1.41	3.49	1.6831e-12;
   1.42	3.489	9.6050e-13;
   1.43	3.488	8.7623e-13;
   1.44	3.487	4.8128e-13;
   1.45	3.486	3.6924e-13;
   10	3.42	1.0000e-13;
   10.001	3.42	1.0000e-13;
   10.002	3.42	1.0000e-13;
}

Absorption
{ * Formula = 1:
  * A = A1*exp((phE-E1)/E2),     for phE < E1 
  *   = A1 + A2*((phE-E1)/E2)^P, for phE >= E1 
  * Formula = 2:
  * A = A0*exp((phE-phE0)*ST),              for phE < phE0 
  *   = AT*(2*ST*(phE-E0-(LN-0.5)/ST))^0.5, for phE >= phE0 
  * where 
  *      phE is a photon energy, 
  *      LN = log(AT/A0), 
  *      ST = S/(T+T0), T is a temperature, 
  *      phE0 = E0 + LN/ST. 

	Formula	= 1	# [1]
  * Formula = 1:
	A1	= 1.0000e+04	# [cm-1]
	A2	= 100	# [cm-1]
	E1	= 1.12	# [eV]
	E2	= 0.025	# [eV]
	P	= 0.5	# [1]
}
